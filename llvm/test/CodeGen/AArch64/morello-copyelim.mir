# RUN: llc -mtriple=aarch64--linux-gnu -run-pass=aarch64-copyelim %s -verify-machineinstrs -o - -mattr=+c64,+morello -target-abi purecap | FileCheck %s
---
# Check that bb.0 COPY is seen through to allow the bb.1 COPY of CZR to be removed.
# CHECK-LABEL: name: test1
# CHECK-NOT: COPY $czr
name:            test1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1

    $c0 = COPY $c1
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $x0 = ALDRXui $c1, 0

  bb.3:
    liveins: $x0

    CRET_ReallyLR 0, implicit $x0

...
# Similar to test1, but with reversed COPY.
# CHECK-LABEL: name: test2
# CHECK-NOT: COPY $czr
name:            test2
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1

    $c1 = COPY $c0
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $x0 = ALDRXui $c1, 0

  bb.3:
    liveins: $x0

    CRET_ReallyLR 0, implicit $x0

...
# Similar to test1, but with a clobber that prevents removal of the CZR COPY.
# CHECK-LABEL: name: test3
# CHECK: COPY $czr
name:            test3
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1, $c2

    $c0 = COPY $c1
    $c1 = PCapLoadImmPre $c1, 0
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $c0 = PCapLoadImmPre $c1, 0

  bb.3:
    liveins: $c0

    CRET_ReallyLR 0, implicit $c0

...
# Similar to test2, but with a clobber that prevents removal of the CZR COPY.
# CHECK-LABEL: name: test4
# CHECK: COPY $czr
name:            test4
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1, $c2

    $c1 = COPY $c0
    $c1 = PCapLoadImmPre $c1, 0
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $c0 = PCapLoadImmPre $c1, 0

  bb.3:
    liveins: $c0

    CRET_ReallyLR 0, implicit $c0

...
# Similar to test2, but with a clobber that prevents removal of the CZR COPY.
# CHECK-LABEL: name: test5
# CHECK: COPY $czr
name:            test5
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1, $c2

    $c1 = COPY $c0
    $c0 = PCapLoadImmPre $c1, 0
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $c0 = PCapLoadImmPre $c1, 0

  bb.3:
    liveins: $c0

    CRET_ReallyLR 0, implicit $c0

...
# Similar to test1, but with two levels of COPYs.
# CHECK-LABEL: name: test6
# CHECK-NOT: COPY $czr
name:            test6
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1, $c2

    $c2 = COPY $c0
    $c1 = COPY $c2
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $x1

    $c0 = PCapLoadImmPre $c1, 0

  bb.3:
    liveins: $x0

    CRET_ReallyLR 0, implicit $c0

...
# Similar to test1, but with two levels of COPYs and a clobber preventing COPY of CZR removal.
# CHECK-LABEL: name: test7
# CHECK: COPY $czr
name:            test7
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1, $c2

    $c2 = COPY $c0
    $c0 = PCapLoadImmPre $c1, 0
    $c1 = COPY $c2
    CBNZC $c1, %bb.2

  bb.1:
    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $c0 = PCapLoadImmPre $c1, 0

  bb.3:
    liveins: $c0

    CRET_ReallyLR 0, implicit $c0

...
# Check that the TargetRegs vector clobber update loop in
#  AArch64RedundantCopyElimination::optimizeCopy works correctly.
# CHECK-LABEL: name: test8
# CHECK: c0 = COPY $czr
# CHECK: c1 = COPY $czr
name:            test8
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1

    $c1 = COPY $c0
    CBNZC $c1, %bb.2

  bb.1:
    liveins: $c0, $c2

    $c0, $c1 = PCapLoadPairImmPre $c2, 0
    $c0 = COPY $czr
    $c1 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $c0 = PCapLoadImmPre $c1, 0

  bb.3:
    liveins: $c0

    CRET_ReallyLR 0, implicit $c0

...
# Check that copy isn't removed from a block with multiple predecessors.
# CHECK-LABEL: name: test9
# CHECK: c0 = COPY $czr
# CHECK-NEXT: B %bb.3
name:            test9
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $c0, $c1

    CBNZC $c0, %bb.2

  bb.1:
    liveins: $c0, $c2

    $c0 = COPY $czr
    B %bb.3

  bb.2:
    liveins: $c1

    $c0 = PCapLoadImmPre $c1, 0

    CBNZC $c1, %bb.1

  bb.3:
    liveins: $c0

    CRET_ReallyLR 0, implicit $c0



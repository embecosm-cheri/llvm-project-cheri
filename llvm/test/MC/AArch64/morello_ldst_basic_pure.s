// RUN: llvm-mc -triple=arm64 -mattr=+morello,+c64 -show-encoding < %s | FileCheck %s

  ldr c24, [c7, w15, uxtw]
  ldr c24, [c7, w15, uxtw #0]
  ldr c24, [c7, w15, uxtw #4]
  ldr c7, [c24, x16, lsl #0]
  ldr c7, [c24, x16]
  ldr c7, [c24, x16, lsl #4]
  ldr c27, [c4, w2, sxtw]
  ldr c27, [c4, w2, sxtw #0]
  ldr c27, [c4, w2, sxtw #4]
  ldr c2, [c28, x29, sxtx]
  ldr c2, [c28, x29, sxtx #0]
  ldr c2, [c28, x29, sxtx #4]
  ldr czr, [csp, xzr, lsl #0]
  ldr czr, [csp, wzr, uxtw]
// CHECK: ldr c24, [c7, w15, uxtw]      // encoding: [0xf8,0x48,0x6f,0xa2]
// CHECK: ldr c24, [c7, w15, uxtw]      // encoding: [0xf8,0x48,0x6f,0xa2]
// CHECK: ldr c24, [c7, w15, uxtw #4]   // encoding: [0xf8,0x58,0x6f,0xa2]
// CHECK: ldr c7, [c24, x16]            // encoding: [0x07,0x6b,0x70,0xa2]
// CHECK: ldr c7, [c24, x16]            // encoding: [0x07,0x6b,0x70,0xa2]
// CHECK: ldr c7, [c24, x16, lsl #4]    // encoding: [0x07,0x7b,0x70,0xa2]
// CHECK: ldr c27, [c4, w2, sxtw]       // encoding: [0x9b,0xc8,0x62,0xa2]
// CHECK: ldr c27, [c4, w2, sxtw]       // encoding: [0x9b,0xc8,0x62,0xa2]
// CHECK: ldr c27, [c4, w2, sxtw #4]    // encoding: [0x9b,0xd8,0x62,0xa2]
// CHECK: ldr c2, [c28, x29, sxtx]      // encoding: [0x82,0xeb,0x7d,0xa2]
// CHECK: ldr c2, [c28, x29, sxtx]      // encoding: [0x82,0xeb,0x7d,0xa2]
// CHECK: ldr c2, [c28, x29, sxtx #4]   // encoding: [0x82,0xfb,0x7d,0xa2]
// CHECK: ldr czr, [csp, xzr]           // encoding: [0xff,0x6b,0x7f,0xa2]
// CHECK: ldr czr, [csp, wzr, uxtw]     // encoding: [0xff,0x4b,0x7f,0xa2]

  str c24, [c7, w15, uxtw]
  str c24, [c7, w15, uxtw #0]
  str c24, [c7, w15, uxtw #4]
  str c7, [c24, x16, lsl #0]
  str c7, [c24, x16]
  str c7, [c24, x16, lsl #4]
  str c27, [c4, w2, sxtw]
  str c27, [c4, w2, sxtw #0]
  str c27, [c4, w2, sxtw #4]
  str c2, [c28, x29, sxtx]
  str c2, [c28, x29, sxtx #0]
  str c2, [c28, x29, sxtx #4]
  str czr, [csp, xzr, lsl #0]
  str czr, [csp, wzr, uxtw]
// CHECK: str c24, [c7, w15, uxtw]      // encoding: [0xf8,0x48,0x2f,0xa2]
// CHECK: str c24, [c7, w15, uxtw]      // encoding: [0xf8,0x48,0x2f,0xa2]
// CHECK: str c24, [c7, w15, uxtw #4]   // encoding: [0xf8,0x58,0x2f,0xa2]
// CHECK: str c7, [c24, x16]            // encoding: [0x07,0x6b,0x30,0xa2]
// CHECK: str c7, [c24, x16]            // encoding: [0x07,0x6b,0x30,0xa2]
// CHECK: str c7, [c24, x16, lsl #4]    // encoding: [0x07,0x7b,0x30,0xa2]
// CHECK: str c27, [c4, w2, sxtw]       // encoding: [0x9b,0xc8,0x22,0xa2]
// CHECK: str c27, [c4, w2, sxtw]       // encoding: [0x9b,0xc8,0x22,0xa2]
// CHECK: str c27, [c4, w2, sxtw #4]    // encoding: [0x9b,0xd8,0x22,0xa2]
// CHECK: str c2, [c28, x29, sxtx]      // encoding: [0x82,0xeb,0x3d,0xa2]
// CHECK: str c2, [c28, x29, sxtx]      // encoding: [0x82,0xeb,0x3d,0xa2]
// CHECK: str c2, [c28, x29, sxtx #4]   // encoding: [0x82,0xfb,0x3d,0xa2]
// CHECK: str czr, [csp, xzr]           // encoding: [0xff,0x6b,0x3f,0xa2]
// CHECK: str czr, [csp, wzr, uxtw]     // encoding: [0xff,0x4b,0x3f,0xa2]

// Load/Store capability (register) via alternate base.
  ldr c1, [x2, w3, uxtw]
  ldr c1, [x2, w3, uxtw #0]
  ldr c1, [x2, w3, uxtw #4]
  ldr c1, [x2, x3]
  ldr c1, [x2, x3, lsl #0]
  ldr c1, [x2, x3, lsl #4]
  ldr c1, [x2, w3, sxtw]
  ldr c1, [x2, w3, sxtw #0]
  ldr c1, [x2, w3, sxtw #4]
  ldr c1, [x2, x3, sxtx]
  ldr c1, [x2, x3, sxtx #0]
  ldr c1, [x2, x3, sxtx #4]
  str c1, [x2, w3, uxtw]
  str c1, [x2, w3, uxtw #0]
  str c1, [x2, w3, uxtw #4]
  str c1, [x2, x3]
  str c1, [x2, x3, lsl #0]
  str c1, [x2, x3, lsl #4]
  str c1, [x2, w3, sxtw]
  str c1, [x2, w3, sxtw #0]
  str c1, [x2, w3, sxtw #4]
  str c1, [x2, x3, sxtx]
  str c1, [x2, x3, sxtx #0]
  str c1, [x2, x3, sxtx #4]
// CHECK: ldr	c1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xe3,0xc2]
// CHECK: ldr	c1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xe3,0xc2]
// CHECK: ldr	c1, [x2, w3, uxtw #4]   // encoding: [0x41,0x5c,0xe3,0xc2]
// CHECK: ldr	c1, [x2, x3]            // encoding: [0x41,0x6c,0xe3,0xc2]
// CHECK: ldr	c1, [x2, x3]            // encoding: [0x41,0x6c,0xe3,0xc2]
// CHECK: ldr	c1, [x2, x3, lsl #4]    // encoding: [0x41,0x7c,0xe3,0xc2]
// CHECK: ldr	c1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xe3,0xc2]
// CHECK: ldr	c1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xe3,0xc2]
// CHECK: ldr	c1, [x2, w3, sxtw #4]   // encoding: [0x41,0xdc,0xe3,0xc2]
// CHECK: ldr	c1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xe3,0xc2]
// CHECK: ldr	c1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xe3,0xc2]
// CHECK: ldr	c1, [x2, x3, sxtx #4]   // encoding: [0x41,0xfc,0xe3,0xc2]
// CHECK: str	c1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xe3,0xc2]
// CHECK: str	c1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xe3,0xc2]
// CHECK: str	c1, [x2, w3, uxtw #4]   // encoding: [0x41,0x54,0xe3,0xc2]
// CHECK: str	c1, [x2, x3]            // encoding: [0x41,0x64,0xe3,0xc2]
// CHECK: str	c1, [x2, x3]            // encoding: [0x41,0x64,0xe3,0xc2]
// CHECK: str	c1, [x2, x3, lsl #4]    // encoding: [0x41,0x74,0xe3,0xc2]
// CHECK: str	c1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xe3,0xc2]
// CHECK: str	c1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xe3,0xc2]
// CHECK: str	c1, [x2, w3, sxtw #4]   // encoding: [0x41,0xd4,0xe3,0xc2]
// CHECK: str	c1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xe3,0xc2]
// CHECK: str	c1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xe3,0xc2]
// CHECK: str	c1, [x2, x3, sxtx #4]   // encoding: [0x41,0xf4,0xe3,0xc2]


// Load/Store Register (register) via alternate base.
  ldr w1, [x2, w3, uxtw]
  ldr w1, [x2, w3, uxtw #0]
  ldr w1, [x2, w3, uxtw #2]
  ldr w1, [x2, x3]
  ldr w1, [x2, x3, lsl #0]
  ldr w1, [x2, x3, lsl #2]
  ldr w1, [x2, w3, sxtw]
  ldr w1, [x2, w3, sxtw #0]
  ldr w1, [x2, w3, sxtw #2]
  ldr w1, [x2, x3, sxtx]
  ldr w1, [x2, x3, sxtx #0]
  ldr w1, [x2, x3, sxtx #2]
  ldr x1, [x2, w3, uxtw]
  ldr x1, [x2, w3, uxtw #0]
  ldr x1, [x2, w3, uxtw #3]
  ldr x1, [x2, x3]
  ldr x1, [x2, x3, lsl #0]
  ldr x1, [x2, x3, lsl #3]
  ldr x1, [x2, w3, sxtw]
  ldr x1, [x2, w3, sxtw #0]
  ldr x1, [x2, w3, sxtw #3]
  ldr x1, [x2, x3, sxtx]
  ldr x1, [x2, x3, sxtx #0]
  ldr x1, [x2, x3, sxtx #3]
  str w1, [x2, w3, uxtw]
  str w1, [x2, w3, uxtw #0]
  str w1, [x2, w3, uxtw #2]
  str w1, [x2, x3]
  str w1, [x2, x3, lsl #0]
  str w1, [x2, x3, lsl #2]
  str w1, [x2, w3, sxtw]
  str w1, [x2, w3, sxtw #0]
  str w1, [x2, w3, sxtw #2]
  str w1, [x2, x3, sxtx]
  str w1, [x2, x3, sxtx #0]
  str w1, [x2, x3, sxtx #2]
  str x1, [x2, w3, uxtw]
  str x1, [x2, w3, uxtw #0]
  str x1, [x2, w3, uxtw #3]
  str x1, [x2, x3]
  str x1, [x2, x3, lsl #0]
  str x1, [x2, x3, lsl #3]
  str x1, [x2, w3, sxtw]
  str x1, [x2, w3, sxtw #0]
  str x1, [x2, w3, sxtw #3]
  str x1, [x2, x3, sxtx]
  str x1, [x2, x3, sxtx #0]
  str x1, [x2, x3, sxtx #3]
// CHECK: ldr	w1, [x2, w3, uxtw]      // encoding: [0x41,0x40,0xe3,0x82]
// CHECK: ldr	w1, [x2, w3, uxtw]      // encoding: [0x41,0x40,0xe3,0x82]
// CHECK: ldr	w1, [x2, w3, uxtw #2]   // encoding: [0x41,0x50,0xe3,0x82]
// CHECK: ldr	w1, [x2, x3]            // encoding: [0x41,0x60,0xe3,0x82]
// CHECK: ldr	w1, [x2, x3]            // encoding: [0x41,0x60,0xe3,0x82]
// CHECK: ldr	w1, [x2, x3, lsl #2]    // encoding: [0x41,0x70,0xe3,0x82]
// CHECK: ldr	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc0,0xe3,0x82]
// CHECK: ldr	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc0,0xe3,0x82]
// CHECK: ldr	w1, [x2, w3, sxtw #2]   // encoding: [0x41,0xd0,0xe3,0x82]
// CHECK: ldr	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe0,0xe3,0x82]
// CHECK: ldr	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe0,0xe3,0x82]
// CHECK: ldr	w1, [x2, x3, sxtx #2]   // encoding: [0x41,0xf0,0xe3,0x82]
// CHECK: ldr	x1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xe3,0x82]
// CHECK: ldr	x1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xe3,0x82]
// CHECK: ldr	x1, [x2, w3, uxtw #3]   // encoding: [0x41,0x54,0xe3,0x82]
// CHECK: ldr	x1, [x2, x3]            // encoding: [0x41,0x64,0xe3,0x82]
// CHECK: ldr	x1, [x2, x3]            // encoding: [0x41,0x64,0xe3,0x82]
// CHECK: ldr	x1, [x2, x3, lsl #3]    // encoding: [0x41,0x74,0xe3,0x82]
// CHECK: ldr	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xe3,0x82]
// CHECK: ldr	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xe3,0x82]
// CHECK: ldr	x1, [x2, w3, sxtw #3]   // encoding: [0x41,0xd4,0xe3,0x82]
// CHECK: ldr	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xe3,0x82]
// CHECK: ldr	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xe3,0x82]
// CHECK: ldr	x1, [x2, x3, sxtx #3]   // encoding: [0x41,0xf4,0xe3,0x82]
// CHECK: str	w1, [x2, w3, uxtw]      // encoding: [0x41,0x40,0xa3,0x82]
// CHECK: str	w1, [x2, w3, uxtw]      // encoding: [0x41,0x40,0xa3,0x82]
// CHECK: str	w1, [x2, w3, uxtw #2]   // encoding: [0x41,0x50,0xa3,0x82]
// CHECK: str	w1, [x2, x3]            // encoding: [0x41,0x60,0xa3,0x82]
// CHECK: str	w1, [x2, x3]            // encoding: [0x41,0x60,0xa3,0x82]
// CHECK: str	w1, [x2, x3, lsl #2]    // encoding: [0x41,0x70,0xa3,0x82]
// CHECK: str	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc0,0xa3,0x82]
// CHECK: str	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc0,0xa3,0x82]
// CHECK: str	w1, [x2, w3, sxtw #2]   // encoding: [0x41,0xd0,0xa3,0x82]
// CHECK: str	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe0,0xa3,0x82]
// CHECK: str	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe0,0xa3,0x82]
// CHECK: str	w1, [x2, x3, sxtx #2]   // encoding: [0x41,0xf0,0xa3,0x82]
// CHECK: str	x1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xa3,0x82]
// CHECK: str	x1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xa3,0x82]
// CHECK: str	x1, [x2, w3, uxtw #3]   // encoding: [0x41,0x54,0xa3,0x82]
// CHECK: str	x1, [x2, x3]            // encoding: [0x41,0x64,0xa3,0x82]
// CHECK: str	x1, [x2, x3]            // encoding: [0x41,0x64,0xa3,0x82]
// CHECK: str	x1, [x2, x3, lsl #3]    // encoding: [0x41,0x74,0xa3,0x82]
// CHECK: str	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xa3,0x82]
// CHECK: str	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xa3,0x82]
// CHECK: str	x1, [x2, w3, sxtw #3]   // encoding: [0x41,0xd4,0xa3,0x82]
// CHECK: str	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xa3,0x82]
// CHECK: str	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xa3,0x82]
// CHECK: str	x1, [x2, x3, sxtx #3]   // encoding: [0x41,0xf4,0xa3,0x82]

// Load/Store Register Byte (register) via alternate base.
  ldrb w1, [x2, w3, uxtw]
  ldrb w1, [x2, w3, uxtw #0]
  ldrb w1, [x2, x3]
  ldrb w1, [x2, x3, lsl #0]
  ldrb w1, [x2, w3, sxtw]
  ldrb w1, [x2, w3, sxtw #0]
  ldrb w1, [x2, x3, sxtx]
  ldrb w1, [x2, x3, sxtx #0]
  strb w1, [x2, w3, uxtw]
  strb w1, [x2, w3, uxtw #0]
  strb w1, [x2, x3]
  strb w1, [x2, x3, lsl #0]
  strb w1, [x2, w3, sxtw]
  strb w1, [x2, w3, sxtw #0]
  strb w1, [x2, x3, sxtx]
  strb w1, [x2, x3, sxtx #0]
// CHECK: ldrb	w1, [x2, w3, uxtw]      // encoding: [0x41,0x40,0xc3,0x82]
// CHECK: ldrb	w1, [x2, w3, uxtw #0]   // encoding: [0x41,0x50,0xc3,0x82]
// CHECK: ldrb	w1, [x2, x3]            // encoding: [0x41,0x60,0xc3,0x82]
// CHECK: ldrb	w1, [x2, x3, lsl #0]    // encoding: [0x41,0x70,0xc3,0x82]
// CHECK: ldrb	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc0,0xc3,0x82]
// CHECK: ldrb	w1, [x2, w3, sxtw #0]   // encoding: [0x41,0xd0,0xc3,0x82]
// CHECK: ldrb	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe0,0xc3,0x82]
// CHECK: ldrb	w1, [x2, x3, sxtx #0]   // encoding: [0x41,0xf0,0xc3,0x82]
// CHECK: strb	w1, [x2, w3, uxtw]      // encoding: [0x41,0x40,0x83,0x82]
// CHECK: strb	w1, [x2, w3, uxtw #0]   // encoding: [0x41,0x50,0x83,0x82]
// CHECK: strb	w1, [x2, x3]            // encoding: [0x41,0x60,0x83,0x82]
// CHECK: strb	w1, [x2, x3, lsl #0]    // encoding: [0x41,0x70,0x83,0x82]
// CHECK: strb	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc0,0x83,0x82]
// CHECK: strb	w1, [x2, w3, sxtw #0]   // encoding: [0x41,0xd0,0x83,0x82]
// CHECK: strb	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe0,0x83,0x82]
// CHECK: strb	w1, [x2, x3, sxtx #0]   // encoding: [0x41,0xf0,0x83,0x82]

// Load/Store Register Halfword (register) via alternate base.
  ldrh w1, [x2, w3, uxtw]
  ldrh w1, [x2, w3, uxtw #0]
  ldrh w1, [x2, w3, uxtw #1]
  ldrh w1, [x2, x3]
  ldrh w1, [x2, x3, lsl #0]
  ldrh w1, [x2, x3, lsl #1]
  ldrh w1, [x2, w3, sxtw]
  ldrh w1, [x2, w3, sxtw #0]
  ldrh w1, [x2, w3, sxtw #1]
  ldrh w1, [x2, x3, sxtx]
  ldrh w1, [x2, x3, sxtx #0]
  ldrh w1, [x2, x3, sxtx #1]
  strh w1, [x2, w3, uxtw]
  strh w1, [x2, w3, uxtw #0]
  strh w1, [x2, w3, uxtw #1]
  strh w1, [x2, x3]
  strh w1, [x2, x3, lsl #0]
  strh w1, [x2, x3, lsl #1]
  strh w1, [x2, w3, sxtw]
  strh w1, [x2, w3, sxtw #0]
  strh w1, [x2, w3, sxtw #1]
  strh w1, [x2, x3, sxtx]
  strh w1, [x2, x3, sxtx #0]
  strh w1, [x2, x3, sxtx #1]
// CHECK: ldrh	w1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xc3,0x82]
// CHECK: ldrh	w1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xc3,0x82]
// CHECK: ldrh	w1, [x2, w3, uxtw #1]   // encoding: [0x41,0x5c,0xc3,0x82]
// CHECK: ldrh	w1, [x2, x3]            // encoding: [0x41,0x6c,0xc3,0x82]
// CHECK: ldrh	w1, [x2, x3]            // encoding: [0x41,0x6c,0xc3,0x82]
// CHECK: ldrh	w1, [x2, x3, lsl #1]    // encoding: [0x41,0x7c,0xc3,0x82]
// CHECK: ldrh	w1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xc3,0x82]
// CHECK: ldrh	w1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xc3,0x82]
// CHECK: ldrh	w1, [x2, w3, sxtw #1]   // encoding: [0x41,0xdc,0xc3,0x82]
// CHECK: ldrh	w1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xc3,0x82]
// CHECK: ldrh	w1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xc3,0x82]
// CHECK: ldrh	w1, [x2, x3, sxtx #1]   // encoding: [0x41,0xfc,0xc3,0x82]
// CHECK: strh	w1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0x83,0x82]
// CHECK: strh	w1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0x83,0x82]
// CHECK: strh	w1, [x2, w3, uxtw #1]   // encoding: [0x41,0x5c,0x83,0x82]
// CHECK: strh	w1, [x2, x3]            // encoding: [0x41,0x6c,0x83,0x82]
// CHECK: strh	w1, [x2, x3]            // encoding: [0x41,0x6c,0x83,0x82]
// CHECK: strh	w1, [x2, x3, lsl #1]    // encoding: [0x41,0x7c,0x83,0x82]
// CHECK: strh	w1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0x83,0x82]
// CHECK: strh	w1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0x83,0x82]
// CHECK: strh	w1, [x2, w3, sxtw #1]   // encoding: [0x41,0xdc,0x83,0x82]
// CHECK: strh	w1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0x83,0x82]
// CHECK: strh	w1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0x83,0x82]
// CHECK: strh	w1, [x2, x3, sxtx #1]   // encoding: [0x41,0xfc,0x83,0x82]

// Load Register Signed Byte (register) via alternate base.
  ldrsb w1, [x2, w3, uxtw]
  ldrsb w1, [x2, w3, uxtw #0]
  ldrsb w1, [x2, x3]
  ldrsb w1, [x2, x3, lsl #0]
  ldrsb w1, [x2, w3, sxtw]
  ldrsb w1, [x2, w3, sxtw #0]
  ldrsb w1, [x2, x3, sxtx]
  ldrsb w1, [x2, x3, sxtx #0]
  ldrsb x1, [x2, w3, uxtw]
  ldrsb x1, [x2, w3, uxtw #0]
  ldrsb x1, [x2, x3]
  ldrsb x1, [x2, x3, lsl #0]
  ldrsb x1, [x2, w3, sxtw]
  ldrsb x1, [x2, w3, sxtw #0]
  ldrsb x1, [x2, x3, sxtx]
  ldrsb x1, [x2, x3, sxtx #0]
// CHECK: ldrsb	w1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, w3, uxtw #0]   // encoding: [0x41,0x54,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, x3]            // encoding: [0x41,0x64,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, x3, lsl #0]    // encoding: [0x41,0x74,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, w3, sxtw #0]   // encoding: [0x41,0xd4,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0xc3,0x82]
// CHECK: ldrsb	w1, [x2, x3, sxtx #0]   // encoding: [0x41,0xf4,0xc3,0x82]
// CHECK: ldrsb	x1, [x2, w3, uxtw]      // encoding: [0x41,0x44,0x83,0x82]
// CHECK: ldrsb	x1, [x2, w3, uxtw #0]   // encoding: [0x41,0x54,0x83,0x82]
// CHECK: ldrsb	x1, [x2, x3]            // encoding: [0x41,0x64,0x83,0x82]
// CHECK: ldrsb	x1, [x2, x3, lsl #0]    // encoding: [0x41,0x74,0x83,0x82]
// CHECK: ldrsb	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc4,0x83,0x82]
// CHECK: ldrsb	x1, [x2, w3, sxtw #0]   // encoding: [0x41,0xd4,0x83,0x82]
// CHECK: ldrsb	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe4,0x83,0x82]
// CHECK: ldrsb	x1, [x2, x3, sxtx #0]   // encoding: [0x41,0xf4,0x83,0x82]

// Load Register Signed Halfword (register) via alternate base.
  ldrsh w1, [x2, w3, uxtw]
  ldrsh w1, [x2, w3, uxtw #0]
  ldrsh w1, [x2, w3, uxtw #1]
  ldrsh w1, [x2, x3]
  ldrsh w1, [x2, x3, lsl #0]
  ldrsh w1, [x2, x3, lsl #1]
  ldrsh w1, [x2, w3, sxtw]
  ldrsh w1, [x2, w3, sxtw #0]
  ldrsh w1, [x2, w3, sxtw #1]
  ldrsh w1, [x2, x3, sxtx]
  ldrsh w1, [x2, x3, sxtx #0]
  ldrsh w1, [x2, x3, sxtx #1]
  ldrsh x1, [x2, w3, uxtw]
  ldrsh x1, [x2, w3, uxtw #0]
  ldrsh x1, [x2, w3, uxtw #1]
  ldrsh x1, [x2, x3]
  ldrsh x1, [x2, x3, lsl #0]
  ldrsh x1, [x2, x3, lsl #1]
  ldrsh x1, [x2, w3, sxtw]
  ldrsh x1, [x2, w3, sxtw #0]
  ldrsh x1, [x2, w3, sxtw #1]
  ldrsh x1, [x2, x3, sxtx]
  ldrsh x1, [x2, x3, sxtx #0]
  ldrsh x1, [x2, x3, sxtx #1]
// CHECK: ldrsh	w1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, w3, uxtw #1]   // encoding: [0x41,0x58,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, x3]            // encoding: [0x41,0x68,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, x3]            // encoding: [0x41,0x68,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, x3, lsl #1]    // encoding: [0x41,0x78,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, w3, sxtw #1]   // encoding: [0x41,0xd8,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0xc3,0x82]
// CHECK: ldrsh	w1, [x2, x3, sxtx #1]   // encoding: [0x41,0xf8,0xc3,0x82]
// CHECK: ldrsh	x1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0x83,0x82]
// CHECK: ldrsh	x1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0x83,0x82]
// CHECK: ldrsh	x1, [x2, w3, uxtw #1]   // encoding: [0x41,0x58,0x83,0x82]
// CHECK: ldrsh	x1, [x2, x3]            // encoding: [0x41,0x68,0x83,0x82]
// CHECK: ldrsh	x1, [x2, x3]            // encoding: [0x41,0x68,0x83,0x82]
// CHECK: ldrsh	x1, [x2, x3, lsl #1]    // encoding: [0x41,0x78,0x83,0x82]
// CHECK: ldrsh	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0x83,0x82]
// CHECK: ldrsh	x1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0x83,0x82]
// CHECK: ldrsh	x1, [x2, w3, sxtw #1]   // encoding: [0x41,0xd8,0x83,0x82]
// CHECK: ldrsh	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0x83,0x82]
// CHECK: ldrsh	x1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0x83,0x82]
// CHECK: ldrsh	x1, [x2, x3, sxtx #1]   // encoding: [0x41,0xf8,0x83,0x82]

// Load/Store SIMD&FP Register (register) via alternate base.
  ldr d1, [x2, w3, uxtw]
  ldr d1, [x2, w3, uxtw #0]
  ldr d1, [x2, w3, uxtw #3]
  ldr d1, [x2, x3]
  ldr d1, [x2, x3, lsl #0]
  ldr d1, [x2, x3, lsl #3]
  ldr d1, [x2, w3, sxtw]
  ldr d1, [x2, w3, sxtw #0]
  ldr d1, [x2, w3, sxtw #3]
  ldr d1, [x2, x3, sxtx]
  ldr d1, [x2, x3, sxtx #0]
  ldr d1, [x2, x3, sxtx #3]
  ldr s1, [x2, w3, uxtw]
  ldr s1, [x2, w3, uxtw #0]
  ldr s1, [x2, w3, uxtw #2]
  ldr s1, [x2, x3]
  ldr s1, [x2, x3, lsl #0]
  ldr s1, [x2, x3, lsl #2]
  ldr s1, [x2, w3, sxtw]
  ldr s1, [x2, w3, sxtw #0]
  ldr s1, [x2, w3, sxtw #2]
  ldr s1, [x2, x3, sxtx]
  ldr s1, [x2, x3, sxtx #0]
  ldr s1, [x2, x3, sxtx #2]
  str d1, [x2, w3, uxtw]
  str d1, [x2, w3, uxtw #0]
  str d1, [x2, w3, uxtw #3]
  str d1, [x2, x3]
  str d1, [x2, x3, lsl #0]
  str d1, [x2, x3, lsl #3]
  str d1, [x2, w3, sxtw]
  str d1, [x2, w3, sxtw #0]
  str d1, [x2, w3, sxtw #3]
  str d1, [x2, x3, sxtx]
  str d1, [x2, x3, sxtx #0]
  str d1, [x2, x3, sxtx #3]
  str s1, [x2, w3, uxtw]
  str s1, [x2, w3, uxtw #0]
  str s1, [x2, w3, uxtw #2]
  str s1, [x2, x3]
  str s1, [x2, x3, lsl #0]
  str s1, [x2, x3, lsl #2]
  str s1, [x2, w3, sxtw]
  str s1, [x2, w3, sxtw #0]
  str s1, [x2, w3, sxtw #2]
  str s1, [x2, x3, sxtx]
  str s1, [x2, x3, sxtx #0]
  str s1, [x2, x3, sxtx #2]
// CHECK: ldr	d1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0xe3,0x82]
// CHECK: ldr	d1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0xe3,0x82]
// CHECK: ldr	d1, [x2, w3, uxtw #3]   // encoding: [0x41,0x58,0xe3,0x82]
// CHECK: ldr	d1, [x2, x3]            // encoding: [0x41,0x68,0xe3,0x82]
// CHECK: ldr	d1, [x2, x3]            // encoding: [0x41,0x68,0xe3,0x82]
// CHECK: ldr	d1, [x2, x3, lsl #3]    // encoding: [0x41,0x78,0xe3,0x82]
// CHECK: ldr	d1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0xe3,0x82]
// CHECK: ldr	d1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0xe3,0x82]
// CHECK: ldr	d1, [x2, w3, sxtw #3]   // encoding: [0x41,0xd8,0xe3,0x82]
// CHECK: ldr	d1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0xe3,0x82]
// CHECK: ldr	d1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0xe3,0x82]
// CHECK: ldr	d1, [x2, x3, sxtx #3]   // encoding: [0x41,0xf8,0xe3,0x82]
// CHECK: ldr	s1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xe3,0x82]
// CHECK: ldr	s1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xe3,0x82]
// CHECK: ldr	s1, [x2, w3, uxtw #2]   // encoding: [0x41,0x5c,0xe3,0x82]
// CHECK: ldr	s1, [x2, x3]            // encoding: [0x41,0x6c,0xe3,0x82]
// CHECK: ldr	s1, [x2, x3]            // encoding: [0x41,0x6c,0xe3,0x82]
// CHECK: ldr	s1, [x2, x3, lsl #2]    // encoding: [0x41,0x7c,0xe3,0x82]
// CHECK: ldr	s1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xe3,0x82]
// CHECK: ldr	s1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xe3,0x82]
// CHECK: ldr	s1, [x2, w3, sxtw #2]   // encoding: [0x41,0xdc,0xe3,0x82]
// CHECK: ldr	s1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xe3,0x82]
// CHECK: ldr	s1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xe3,0x82]
// CHECK: ldr	s1, [x2, x3, sxtx #2]   // encoding: [0x41,0xfc,0xe3,0x82]
// CHECK: str	d1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0xa3,0x82]
// CHECK: str	d1, [x2, w3, uxtw]      // encoding: [0x41,0x48,0xa3,0x82]
// CHECK: str	d1, [x2, w3, uxtw #3]   // encoding: [0x41,0x58,0xa3,0x82]
// CHECK: str	d1, [x2, x3]            // encoding: [0x41,0x68,0xa3,0x82]
// CHECK: str	d1, [x2, x3]            // encoding: [0x41,0x68,0xa3,0x82]
// CHECK: str	d1, [x2, x3, lsl #3]    // encoding: [0x41,0x78,0xa3,0x82]
// CHECK: str	d1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0xa3,0x82]
// CHECK: str	d1, [x2, w3, sxtw]      // encoding: [0x41,0xc8,0xa3,0x82]
// CHECK: str	d1, [x2, w3, sxtw #3]   // encoding: [0x41,0xd8,0xa3,0x82]
// CHECK: str	d1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0xa3,0x82]
// CHECK: str	d1, [x2, x3, sxtx]      // encoding: [0x41,0xe8,0xa3,0x82]
// CHECK: str	d1, [x2, x3, sxtx #3]   // encoding: [0x41,0xf8,0xa3,0x82]
// CHECK: str	s1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xa3,0x82]
// CHECK: str	s1, [x2, w3, uxtw]      // encoding: [0x41,0x4c,0xa3,0x82]
// CHECK: str	s1, [x2, w3, uxtw #2]   // encoding: [0x41,0x5c,0xa3,0x82]
// CHECK: str	s1, [x2, x3]            // encoding: [0x41,0x6c,0xa3,0x82]
// CHECK: str	s1, [x2, x3]            // encoding: [0x41,0x6c,0xa3,0x82]
// CHECK: str	s1, [x2, x3, lsl #2]    // encoding: [0x41,0x7c,0xa3,0x82]
// CHECK: str	s1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xa3,0x82]
// CHECK: str	s1, [x2, w3, sxtw]      // encoding: [0x41,0xcc,0xa3,0x82]
// CHECK: str	s1, [x2, w3, sxtw #2]   // encoding: [0x41,0xdc,0xa3,0x82]
// CHECK: str	s1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xa3,0x82]
// CHECK: str	s1, [x2, x3, sxtx]      // encoding: [0x41,0xec,0xa3,0x82]
// CHECK: str	s1, [x2, x3, sxtx #2]   // encoding: [0x41,0xfc,0xa3,0x82]
